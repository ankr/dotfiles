# vim as default editor
export EDITOR=vim

export PATH="/usr/local/bin:~/.dotfiles/bin:$PATH"

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export CLICOLOR=1
export LSCOLORS=gxfxcxdxbxegedabagacad

# history
shopt -s histappend
shopt -s cmdhist
export HISTFILESIZE=1000000
export HISTSIZE=10000
export HISTCONTROL=ignoredups
export HISTIGNORE='ls:ll:l:history'
export HISTTIMEFORMAT='%Y-%m-%d %T '

# make `ls` show colors
if [ $(uname) == "Linux" ] ; then
  alias ls='ls --color=auto'
else # OS X
  alias ls='ls -G'
fi

# aliases changing default behaviors
alias grep="grep --color=auto"
alias mkdir="mkdir -p"
alias less="less -r"
alias tree="tree -C"

# ls aliasses
alias l="ls -l"
alias ll="ls -la"

# navigation aliases
alias ..="cd ../"
alias ...="cd ../../"

# return the machines public IP address
alias extip="dig +short myip.opendns.com @resolver1.opendns.com"

# convenience aliases
alias scls="screen -ls"
alias grin='grep -rin'
alias psa="ps aux"
alias psg="ps aux | grep $1"

# Start ssh agent and add all private keys found in ~/.ssh/
addsshkeys () {
  eval `ssh-agent` && find ~/.ssh/ -name "id_rsa" | xargs ssh-add
}

# PHP Syntax checker
phpsc () {
  if [[ ! -n $(find ${1-$PWD} -name '*.php' -exec php -l {} \; | grep -v "No syntax errors") ]] ; then
    echo "No syntax errors" >&2
  fi
}

# return the machines local IP address
intip () {
  local INTF=`route get default | grep interface | awk '{print $2}'`
  local IP=`ifconfig $INTF | grep 'inet ' | cut -d ' ' -f 2`
  echo $IP
}

# make sure `have` is defined
have () {
  unset -v have
  PATH=$PATH:/sbin:/usr/sbin:/usr/local/sbin type $1 &>/dev/null &&
  have="yes"
}

# Does a rebase pull + stash so I can be extra lazy.
#
# usage: gpull origin
gpull () {
  local s
  local head
  local ref
  local remote
  s=$(git stash 2>/dev/null)
  ref=$(git symbolic-ref HEAD 2>/dev/null)
  head=$(echo "$ref" | cut -d'/' -f3-9)

  if [ "" == "$head" ]; then
    echo "Not on a branch, can't pull"
    __git_stash_pop "$s"
    return 1
  fi

  remote="$1"

  if [ "$remote" = "" ]; then
    remote="origin"
  fi

  git fetch -a "$remote"
  git pull --rebase "$remote" "$head"
  __git_stash_pop "$s"
  return 0
}

#
# Push the current branch with a remote specifier
#
gpush () {
  local head
  local ref
  local remote
  ref=$(git symbolic-ref HEAD 2>/dev/null)
  head=$(echo "$ref" | cut -d'/' -f3-9)
  remote="$1"

  if [ "" = "$head" ]; then
    echo "Not on a branch, can't push"
    return 1
  fi

  if [ "$remote" = "" ]; then
    remote="origin"
  fi

  git push "$remote" "$head"
}

__git_stash_pop () {
  [ "$1" != "No local changes to save" ] && git stash pop
}

#
# Take a branch and do the following:
#
# * Stash current changes.
# * Check out $1
# * git pull origin $1
# * Checkout the previous branch
# * Rebase it on $1
#
grebase () {
  local head
  local s
  local ref
  local remote
  s=$(git stash 2>/dev/null)
  ref=$(git symbolic-ref HEAD 2>/dev/null)
  head=$(echo "$ref" | cut -d'/' -f3-9)
  remote=$2

  if [ "" == "$head" ]; then
    echo "Not on a branch, can't pull"
    __git_stash_pop "$s"
    return 1
  fi

  if [ "$1" == "" ]; then
    echo "No branch selected, can't pull and rebase"
    __git_stash_pop "$s"
    return 2
  fi

  if [ "$remote" == "" ]; then
    remote="origin"
  fi

  # Switch to the original branch and get changes
  git checkout "$1"
  git pull $remote "$1"

  # Switch back and rebase
  git checkout $head
  git rebase "$1"
  __git_stash_pop "$s"
  return 0
}

# load bash completions
if [ -d /etc/bash_completion.d ] ; then
  for file in /etc/bash_completion.d/* ; do
    if [ ! -d $file ] ; then
      source $file
    fi
  done
fi

# adding brew bash_completion if available
if command -v brew > /dev/null && [ -f $(brew --prefix)/etc/bash_completion ] ; then
  source $(brew --prefix)/etc/bash_completion
fi

# shows PS1 like:
# $user @ $host [$cwd] [ hh:mm:ss ] ($gitbranch)
# if root then $user will be red
if [[ $EUID == 0 ]] ; then
  export PS1='\[\e[1;31m\]\u \[\e[0m\]@ \[\e[1;33m\]\H \[\e[0m\][ \[\e[1;32m\]\w \[\e[0m\]] [ \D{%H:%M:%S} ] $(__git_ps1 "( %s )")\n\[\e[1m\]-> \[\e[0m\]'
else
  export PS1='\[\e[1;36m\]\u \[\e[0m\]@ \[\e[1;33m\]\H \[\e[0m\][ \[\e[1;32m\]\w \[\e[0m\]] [ \D{%H:%M:%S} ] $(__git_ps1 "( %s )")\n\[\e[1m\]-> \[\e[0m\]'
fi

# read custom bashrc
if [ -f ~/.dotfiles/custom/bashrc ] ; then
  source ~/.dotfiles/custom/bashrc
fi
